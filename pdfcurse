#!/usr/bin/python3.7

import argparse
import sys
import os
import subprocess
import time
import curses

from curses import textpad
from pikepdf import Pdf


class PdfObj:
    """PDF file object in memory"""

    _fname = None
    _page = None
    _pages = 1
    _file_pages = None

    _buffer = None
    _error = None
    _stdscr = None
    _prevpage = None

    _pollsec = 0.1
    _last_checked = None

    _scr = None
    _start_row = 0
    _start_col = 0
    _cont = False

    _debug = False

    def __init__(self, fname):
        self._fname = fname
        self._page = 1
        pass


    def debug(self, txt):
        if self._debug:
            print(txt, file=sys.stderr)
            sys.stderr.flush()
        pass


    def check_file(self):
        try:
            with Pdf.open(self._fname) as pdf:
                page_count = len(pdf.pages)
            self._file_pages = page_count

        except:
            # ignore - file likely being compiled
            pass

        return self._file_pages


    def load(self, page):
        if page < 1: page = 1

        end_page = page + self._pages - 1
        if end_page > self._file_pages: end_page = self._file_pages
        if page > end_page: page = end_page

        cmd = ['/usr/bin/pdftotext', '-layout', #'-nopgbrk',
               '-f', str(page), '-l', str(end_page), self._fname, '-']
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        page_buffer, self._error = p.communicate()

        success = (p.returncode == 0)
        if success:
            self._page = page
            self._buffer = page_buffer.replace(b'\f', b'\n\n\n\n\n')
            self._last_checked = time.mktime(time.localtime())

        return success


    def paint(self, stdscr):
        lines = self._buffer.split(b'\n')
        [ maxrows, maxcols ] = stdscr.getmaxyx()
        #self.debug('paint: {}x{}'.format(maxrows, maxcols))

        nlines = min(len(lines) - self._start_row, maxrows)
        if nlines < maxrows and self._cont:
            if self._start_row > 0:
                self.load(self._page-1)
            else:
                self.load(self._page)

        stdscr.clear()
        try:
            for r in range(0,  nlines-1):
                row = lines[self._start_row+r]
                ncols = min(len(row) - self._start_col, maxcols)
                stdscr.addstr(r, 0, row[self._start_col:self._start_col+ncols])

        except IndexError as e:
            print(e)
            print(len(lines))

        stdscr.refresh()
        pass


    def goto_page(self):
        ncols, nlines = 8, 1
        uly, ulx = 2, 2

        #self._scr.addstr(uly-2, ulx-1, "Enter page# and Ctrl-G to jump")
        win = curses.newwin(nlines, ncols, uly, ulx)
        textpad.rectangle(self._scr, uly-1, ulx-1, uly + nlines, ulx + ncols)
        self._scr.refresh()

        box = textpad.Textbox(win, True)
        page_number = box.edit().strip()

        if page_number.isnumeric():
            self.load(int(page_number))

        elif page_number[0] == '+' and page_number[1:].isnumeric():
            self.load(self._page + int(page_number[1:]))

        elif page_number[0] == '-' and page_number[1:].isnumeric():
            self.load(self._page - int(page_number[1:]))

        pass


    def browse(self, stdscr):

        if not self.check_file():
            return

        if not self.load(1):
            return

        curses.cbreak()
        self._scr = stdscr

        repaint = True
        while True:

            if repaint:
                self.paint(stdscr)
                repaint = False

            self._scr.timeout(int(self._pollsec*1000))
            key = self._scr.getch()

            if key == -1:
                modified = os.path.getmtime(self._fname)
                if modified > self._last_checked:
                    if not self.check_file():
                        return
                    self.load(self._page)
                    repaint = True
                continue

            repaint = True
            [ maxrows, maxcols ] = stdscr.getmaxyx()

            if key == ord('q'): return

            elif key == curses.KEY_RESIZE:
                if curses.is_term_resized(maxrows, maxcols):
                    curses.resizeterm(*stdscr.getmaxyx())

            # page navigation
            elif key == ord('f'):
                self.load(self._page+1)
                self._start_row = 0

            elif key == ord('a'):
                self.load(self._page-1)
                self._start_row = 0

            # ubiquitous goto
            elif key == ord('g'):
                    self.goto_page()

            # horizontal panning
            elif key == ord('e') and self._start_col + 5 <= maxcols: self._start_col += 5
            elif key == ord('w') and self._start_col >= 5: self._start_col -= 5

            # vertical panning
            elif key == ord('v'):
                if self._cont:
                    self.load(self._page+1)
                    self._start_row = (self._start_row + 5) % maxrows
                elif self._start_row + 5 <= maxrows:
                    self._start_row += 5

            elif key == ord('r'):
                if self._cont:
                    self.load(self._page-1)
                    self._start_row = (self._start_row - 5) % maxrows
                elif self._start_row >= 5:
                    self._start_row -= 5

            elif key == ord('j'):
                if self._cont:
                    self.load(self._page+1)
                    self._start_row = (self._start_row + 1) % maxrows
                elif self._start_row + 1 <= maxrows:
                    self._start_row += 1

            elif key == ord('k'):
                if self._cont:
                    self.load(self._page-1)
                    self._start_row = (self._start_row - 1) % maxrows
                elif self._start_row >= 1:
                    self._start_row -= 1

            # modes
            elif key == ord('c') and self._pages == 1:
                self._pages = 2
                self._cont = True
                self.load(self._page)

            elif key == ord('1') and self._pages > 1:
                self._pages = 1
                self._cont = False
                self.load(self._page)

            # debug
            elif key == ord('d'):
                self._debug = not self._debug
                self.debug('-----------')

            else:
                self.debug("Got key [{}]".format(key))
                repaint = False

        pass


def browse(stdscr, fname):
    pdf = PdfObj(fname)
    pdf.browse(stdscr)
    pass


def prepare_args():
    parser = argparse.ArgumentParser(description="PDF reader")
    parser.add_argument('file', type=str, help="pdf file to read")
    return parser


def main(args):
    # issue2675 bugs.python.org open since 2008! 
    os.unsetenv('LINES')
    os.unsetenv('COLUMNS')
    curses.wrapper(browse, args.file)
    pass


if __name__ == "__main__":
    main(prepare_args().parse_args())

# end
