#!/usr/bin/python

import argparse
import sys
import subprocess
import time
import curses


class Pdf:
    """PDF file object in memory"""

    _fname = None
    _page = None
    _buffer = None
    _error = None
    _stdscr = None
    _prevpage = None


    def __init__(self, fname):
        self._fname = fname
        self._page = 1
        pass


    def debug(self, txt):
        print(txt, file=sys.stderr)
        pass


    def load(self, page):
        cmd = [
                '/usr/bin/pdftotext',
                '-layout',
                '-nopgbrk',
                '-f',
                str(page),
                '-l',
                str(page),
                self._fname,
                '-'
                ]
        self.debug('Running: {}'.format(str(cmd)))
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        page_buffer, self._error = p.communicate()

        success = (p.returncode == 0)
        if success:
            self._page = page
            self._buffer = page_buffer

        return success


    def paint(self, stdscr):
        stdscr.clear()
        lines = self._buffer.split(b'\n')
        for r in range(0, curses.LINES-1):
            stdscr.addstr(r, 0, lines[r][1:curses.COLS-1])

        pass

    def browse(self, stdscr):

        self.load(1)
        while True:
            self.paint(stdscr)
            key = stdscr.getkey()
            if key == 'q': return
            if key == 'f': self.load(self._page + 1)
            if key == 's': self.load(self._page - 1)

        pass


def browse(stdscr, fname):
    pdf = Pdf(fname)
    pdf.browse(stdscr)
    pass


def prepare_args():
    parser = argparse.ArgumentParser(description="PDF reader")
    parser.add_argument('file', type=str, help="pdf file to read")
    return parser


def main(args):
    curses.wrapper(browse, args.file)
    pass


if __name__ == "__main__":
    main(prepare_args().parse_args())

# end
