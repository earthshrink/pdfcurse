#!/usr/bin/python3.7

import argparse
import sys
import os
import subprocess
import time
import curses
import threading

from pikepdf import Pdf


class PdfObj:
    """PDF file object in memory"""

    _fname = None
    _page = None
    _pages = None

    _buffer = None
    _error = None
    _stdscr = None
    _prevpage = None

    _gotkey = None
    _key = None

    _pollsec = 1
    _last_checked = None
    _scr = None

    def __init__(self, fname):
        self._fname = fname
        self._page = 1
        pass


    def debug(self, txt):
        print(txt, file=sys.stderr)
        sys.stderr.flush()
        pass


    def check_file(self):
        try:
            with Pdf.open(self._fname) as pdf:
                page_count = len(pdf.pages)
            self._pages = page_count

        except:
            # ignore - file likely being compiled
            pass

        return self._pages


    def load(self, page):
        if page < 1: page = 1
        if page > self._pages: page = self._pages

        cmd = ['/usr/bin/pdftotext', '-layout', '-nopgbrk',
               '-f', str(page), '-l', str(page), self._fname, '-']
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        page_buffer, self._error = p.communicate()

        success = (p.returncode == 0)
        if success:
            self._page = page
            self._buffer = page_buffer
            self._last_checked = time.mktime(time.localtime())

        return success


    def paint(self, stdscr):
        stdscr.clear()
        lines = self._buffer.split(b'\n')
        try:
            for r in range(0, min(len(lines), curses.LINES)-1):
                stdscr.addstr(r, 0, lines[r][0:curses.COLS-1])

        except IndexError as e:
            print(e)
            print(len(lines))

        stdscr.refresh()
        pass


    def listen(self):

        while True:
            key = self._scr.getkey()
            self._gotkey = True
            self._key = key

        pass


    def browse(self, stdscr):

        if not self.check_file():
            return

        if not self.load(1):
            return

        self._scr = stdscr
        thread = threading.Thread(target=self.listen)
        thread.daemon = True
        thread.start()

        while True:
            self.paint(stdscr)
            time.sleep(self._pollsec)

            if self._gotkey:
                self._gotkey = False
                if self._key == 'q': return
                if self._key == 'f': self.load(self._page+1)
                if self._key == 's': self.load(self._page-1)
                continue

            modified = os.path.getmtime(self._fname)
            if modified > self._last_checked:
                if not self.check_file():
                    return
                self.load(self._page)

        pass


def browse(stdscr, fname):
    pdf = PdfObj(fname)
    pdf.browse(stdscr)
    pass


def prepare_args():
    parser = argparse.ArgumentParser(description="PDF reader")
    parser.add_argument('file', type=str, help="pdf file to read")
    return parser


def main(args):
    curses.wrapper(browse, args.file)
    pass


if __name__ == "__main__":
    main(prepare_args().parse_args())

# end
